# Cursor AI コーディングルール

## 基本原則
- 存在すれば、projectのeslint, prettier設定に常に従ってコーディングする
- 存在しなければ、以下の条件を常に守ってコーディングする

## TypeScript Deep Dive スタイルガイド準拠

### 命名規則
- **変数・関数・パラメータ**: camelCase
- **クラス・インターフェース・型・列挙型**: PascalCase
- **プロパティ・メソッド・アクセサ**: camelCase
- **ファイル名**: camelCase（eslint-plugin-unicorn/filename-case）

### 型システム
- 厳密な null チェックを使用し、非 null アサーション（!）を避ける
- `any` 型の使用を禁止
- 適切な型ガードを使用
- 型推論を活用し、不要な型注釈を避ける
- `unknown` 型を優先して使用

### 配列型
- `Array<T>` ではなく `T[]` を使用

## 最新の JavaScript/TypeScript 機能優先

### モダンな構文
- `const`/`let` を使用（`var` 禁止）
- アロー関数を優先
- 分割代入を活用
- スプレッド演算子を活用
- テンプレートリテラルを使用
- オプショナルチェーン（?.）とnullish coalescing（??）を活用

### 非同期処理
- `async/await` を優先
- Promise チェーンよりも async/await を使用
- 適切なエラーハンドリング

## React フックパターン
- カスタムフックの作成を推奨
- フックの依存配列を適切に設定
- フックの呼び出し順序を保持

## アクセシビリティガイドライン (jsx-a11y)
- alt属性の適切な設定
- キーボードナビゲーションのサポート
- ARIA属性の適切な使用
- セマンティックなHTML要素の使用

## インポート順序 (eslint-plugin-import)
```typescript
// 1. ビルトインモジュール
import fs from 'fs';
import path from 'path';

// 2. 外部ライブラリ
import React from 'react';
import lodash from 'lodash';

// 3. 内部モジュール
import { Component } from './Component';
import { utils } from '../utils';

// 4. 相対パス
import './styles.css';
```

## MDN非推奨機能の回避
- `new Array()` の使用禁止
- `void` 演算子の使用制限
- `with` 文の使用禁止
- `arguments.caller` の使用禁止
- 8進数リテラルの使用禁止
- `__proto__` の使用禁止

## エラー処理パターン
- Error オブジェクトを適切に使用
- リテラルの throw を避ける
- Promise.reject で Error オブジェクトを使用
- 適切な例外処理

## 複雑度制限
- 関数の複雑度: 最大3
- ネストの深さ: 最大3
- 関数の行数: 最大50行
- パラメータ数: 最大3
- ネストしたコールバック: 最大3

## コード品質

### 一般的なルール
- `console.log` の使用禁止（本番環境）
- `debugger` の使用禁止
- `alert` の使用禁止
- 未使用の式を避ける
- 到達不可能なコードを避ける
- `prefer-const` を適用
- オブジェクトの短縮記法を使用
- テンプレートリテラルを優先
- `eval` の使用禁止
- 暗黙的な eval を避ける
- `new Function` の使用禁止

### 文字列・引用符
- 単一引用符（'）を使用
- JSXでは二重引用符（"）を使用
- 不要な文字列連結を避ける

### 比較演算子
- `===` と `!==` を使用（`==` と `!=` 禁止）
- null との比較は例外として許可

## コミット規約
- 変更を行うたびにコミットを提案
- 粒度は適切に小さく
- フォーマット: `<Type>: <Emoji> #<Issue Number> <Title>`
- TypeとTitleは必須
- Issue Numberは存在すれば強く推奨
- Emojiは必須（Gitmojiから選択）

### Type種別
- `chore`: タスクファイルなどプロダクションに影響のない修正
- `docs`: ドキュメントの更新
- `feat`: ユーザー向けの機能の追加や変更
- `fix`: ユーザー向けの不具合の修正
- `refactor`: リファクタリングを目的とした修正
- `style`: フォーマットなどのスタイルに関する修正
- `test`: テストコードの追加や修正

## 開発規約

### コミュニケーション
- ユーザーへの応答はすべて日本語で記述
- コード内のエラーメッセージ（例外トレースやログ出力など）は英語で記述
- 決して謝罪しない
- 慎重かつ多角的に考える

### コード管理
- 不要なコードはコメントアウトではなく削除
- ドキュメント作成時にマークダウンの水平罫線を使用しない

### 品質保証
- ユーザーの指示が推奨開発標準やデファクトスタンダードに準拠していない場合は背景を説明し、作業開始前に適切性を確認
- 優れたエンジニアとして行動し、より良い方法がある場合は積極的に提案

## 実装時の注意事項

### ESLint設定の確認
- プロジェクトのESLint設定を必ず確認
- 設定ファイル（.eslintrc.json, eslint.config.js）の内容を理解
- ルールの詳細を把握してからコーディング開始

### 段階的な修正
- 一度に多数のルールを修正しようとしない
- 優先度の高いルールから順次対応
- 各修正後にESLintチェックを実行

### 型安全性の確保
- TypeScriptの厳密な型チェックを活用
- 型推論を最大限活用
- 適切な型定義を作成

### パフォーマンス考慮
- 不要な再レンダリングを避ける
- メモ化を適切に使用
- 効率的なアルゴリズムを選択

## ファイルパターンベースのルール適用

### テストファイル用の例外
- テストファイル（`tests/**/*`）では一部のルールを緩和
- ファイル名の命名規則を無効化
- console.logを許可
- 関数の行数制限を無効化
- 複雑度制限を無効化
- 厳密な真偽値チェックを無効化
- nullish coalescing要求を無効化
- await要求を無効化
- 浮動Promiseチェックを無効化

### 設定ファイル用の例外
- 設定ファイル（`*.config.js`, `*.config.ts`）では一部のルールを緩和
- console.logを許可
- var-requiresを無効化

### スクリプトファイル用の例外
- スクリプトファイル（`scripts/**/*`）では一部のルールを緩和
- console.logを許可
- process-exitを無効化

## ESLint設定の理解

### 設定の優先順位
1. 基本設定（js.configs.recommended, typescript-eslint.configs.recommended）
2. 全ファイル共通設定（files: ["**/*.{js,jsx,ts,tsx}"]）
3. TypeScript専用設定（files: ["**/*.{ts,tsx}"]）
4. 特定ファイルパターン設定（files: ["tests/**/*"]など）

### ルールの上書きメカニズム
- 後から定義された設定が、先に定義された設定を上書き
- `"off"` に設定されたルールは、そのファイルパターンでは完全に無効化
- ファイルパターンベースの設定は、より具体的なパターンが優先

## エラー対応時の注意点

### よくあるエラーと対処法
- **引用符エラー**: 単一引用符（'）を使用
- **複雑度エラー**: 関数を小さく分割
- **型エラー**: 適切な型定義を作成
- **未使用変数エラー**: 使用しない変数は削除または_プレフィックス
- **命名規則エラー**: TypeScript Deep Dive スタイルガイドに従う

### 段階的修正の手順
1. ESLintエラーを確認
2. 優先度の高いエラーから修正
3. 各修正後にESLintチェックを実行
4. 修正が完了するまで繰り返し

## 品質チェック

### コーディング前の確認事項
- ESLint設定ファイルの内容を理解
- プロジェクト固有のルールを確認
- ファイルパターンベースの例外を把握

### コーディング後の確認事項
- ESLintチェックを実行
- TypeScriptコンパイルエラーがないことを確認
- 不要なコードがないことを確認
- 適切な型定義がされていることを確認

# ESLint設定パッケージ設計に関する注意

## import ... assert { type: 'json' } 構文の利用について
- Node.js（特にESLintやNext.jsの実行環境）では、`import ... assert { type: 'json' }` 構文がサポートされていない場合が多い。
- 設定パッケージのエントリーポイント（index.js）でこの構文を使うと、ESLintやNext.jsのlint実行時に `Unexpected identifier 'assert'` エラーが発生する。
- これは、Node.jsのバージョンやESLintの内部実装がESMのimport assertionsに未対応なため。

## 防止策
- ESLint設定パッケージのエントリーポイントは「ESLint設定（eslint.config.js）」のみをエクスポートする形にする。
- JSONや他の設定をまとめてexportしたい場合も、ESLintで直接importされるファイルはESLint設定だけに限定する。
- 実務で利用する場合は、`import ... assert { type: 'json' }`を避け、CommonJS形式やESLintがサポートする形式で記述する。
- Next.jsやESLintの設定ファイルでパッケージを指定する場合は、`@your-pkg/eslint.config.js`のように設定ファイルを直接importする。

## 例
- NG: `import prettierConfig from './.prettierrc' assert { type: 'json' };`
- OK: `import eslintConfig from '@your-pkg/eslint.config.js'; export default eslintConfig;`

# Next.js App Routerでのクライアント/サーバーコンポーネント設計指針

## 基本原則
- appディレクトリ配下のファイルはデフォルトでサーバーコンポーネントとして扱われる。
- Reactのフック（useState, useEffect, useCallback等）を使う場合は、必ずファイル先頭に "use client" を記述する。
- カスタムフックも同様に "use client" を付与する。
- サーバー/クライアントの責務を明確に分離し、設計段階で意識すること。

## 防止策
- フックを使うファイルには必ず "use client" ディレクティブを追加する。
- コンポーネント設計時にサーバー/クライアントの役割を明確にする。
- エラーが発生した場合は、まず "use client" の有無を確認する。

## 例
- NG: フックを使うファイルに "use client" なし
- OK: フックを使うファイルの先頭に "use client" を記述

# これらを必ず守ること。
